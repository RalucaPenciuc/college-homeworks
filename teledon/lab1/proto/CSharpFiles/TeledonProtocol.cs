// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/TeledonProtocol.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Teledon.Protocol {

  /// <summary>Holder for reflection information generated from proto/TeledonProtocol.proto</summary>
  public static partial class TeledonProtocolReflection {

    #region Descriptor
    /// <summary>File descriptor for proto/TeledonProtocol.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TeledonProtocolReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chtwcm90by9UZWxlZG9uUHJvdG9jb2wucHJvdG8SEHRlbGVkb24ucHJvdG9j",
            "b2wiLgoIVm9sdW50YXISEAoIdXNlcm5hbWUYASABKAkSEAoIcGFzc3dvcmQY",
            "AiABKAkiLAoMQ2F6Q2FyaXRhYmlsEgoKAmlkGAEgASgJEhAKCHRvdGFsU3Vt",
            "GAIgASgJIjcKB0RvbmF0b3ISDAoEbmFtZRgBIAEoCRIPCgdhZGRyZXNzGAIg",
            "ASgJEg0KBXBob25lGAMgASgJInkKB0RvbmF0aWUSFgoOaWRDYXpDYXJpdGFi",
            "aWwYASABKAkSEwoLbnVtZURvbmF0b3IYAiABKAkSFQoNYWRyZXNhRG9uYXRv",
            "chgDIAEoCRIWCg50ZWxlZm9uRG9uYXRvchgEIAEoCRISCgpzdW1hRG9uYXRh",
            "GAUgASgBIsECCg5UZWxlZG9uUmVxdWVzdBIzCgR0eXBlGAEgASgOMiUudGVs",
            "ZWRvbi5wcm90b2NvbC5UZWxlZG9uUmVxdWVzdC5UeXBlEioKBHVzZXIYAiAB",
            "KAsyGi50ZWxlZG9uLnByb3RvY29sLlZvbHVudGFySAASLAoHZG9uYXRpZRgD",
            "IAEoCzIZLnRlbGVkb24ucHJvdG9jb2wuRG9uYXRpZUgAEiwKB2RvbmF0b3IY",
            "BCABKAsyGS50ZWxlZG9uLnByb3RvY29sLkRvbmF0b3JIACJnCgRUeXBlEgsK",
            "B1Vua25vd24QABIJCgVMb2dpbhABEgoKBkxvZ291dBACEhcKE0dldENhenVy",
            "aUNhcml0YWJpbGUQAxISCg5TZWFyY2hEb25hdG9yaRAEEg4KCkFkZERvbmF0",
            "aWUQBUIJCgdwYXlsb2FkIqECCg9UZWxlZG9uUmVzcG9uc2USNAoEdHlwZRgB",
            "IAEoDjImLnRlbGVkb24ucHJvdG9jb2wuVGVsZWRvblJlc3BvbnNlLlR5cGUS",
            "DQoFZXJyb3IYAiABKAkSOAoQY2F6dXJpQ2FyaXRhYmlsZRgDIAMoCzIeLnRl",
            "bGVkb24ucHJvdG9jb2wuQ2F6Q2FyaXRhYmlsEisKCGRvbmF0b3JpGAQgAygL",
            "MhkudGVsZWRvbi5wcm90b2NvbC5Eb25hdG9yImIKBFR5cGUSCwoHVW5rbm93",
            "bhAAEgYKAk9rEAESCQoFRXJyb3IQAhIXChNHZXRDYXp1cmlDYXJpdGFiaWxl",
            "EAMSDwoLR2V0RG9uYXRvcmkQBBIQCgxBZGRlZERvbmF0aWUQBUI0CiB0ZWxl",
            "ZG9uLm5ldHdvcmsucHJvdG9idWZwcm90b2NvbEIQVGVsZWRvblByb3RvYnVm",
            "c2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Teledon.Protocol.Voluntar), global::Teledon.Protocol.Voluntar.Parser, new[]{ "Username", "Password" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Teledon.Protocol.CazCaritabil), global::Teledon.Protocol.CazCaritabil.Parser, new[]{ "Id", "TotalSum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Teledon.Protocol.Donator), global::Teledon.Protocol.Donator.Parser, new[]{ "Name", "Address", "Phone" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Teledon.Protocol.Donatie), global::Teledon.Protocol.Donatie.Parser, new[]{ "IdCazCaritabil", "NumeDonator", "AdresaDonator", "TelefonDonator", "SumaDonata" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Teledon.Protocol.TeledonRequest), global::Teledon.Protocol.TeledonRequest.Parser, new[]{ "Type", "User", "Donatie", "Donator" }, new[]{ "Payload" }, new[]{ typeof(global::Teledon.Protocol.TeledonRequest.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Teledon.Protocol.TeledonResponse), global::Teledon.Protocol.TeledonResponse.Parser, new[]{ "Type", "Error", "CazuriCaritabile", "Donatori" }, null, new[]{ typeof(global::Teledon.Protocol.TeledonResponse.Types.Type) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Voluntar : pb::IMessage<Voluntar> {
    private static readonly pb::MessageParser<Voluntar> _parser = new pb::MessageParser<Voluntar>(() => new Voluntar());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Voluntar> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Teledon.Protocol.TeledonProtocolReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Voluntar() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Voluntar(Voluntar other) : this() {
      username_ = other.username_;
      password_ = other.password_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Voluntar Clone() {
      return new Voluntar(this);
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 1;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Voluntar);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Voluntar other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Username != other.Username) return false;
      if (Password != other.Password) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Username.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Username);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Voluntar other) {
      if (other == null) {
        return;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Username = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CazCaritabil : pb::IMessage<CazCaritabil> {
    private static readonly pb::MessageParser<CazCaritabil> _parser = new pb::MessageParser<CazCaritabil>(() => new CazCaritabil());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CazCaritabil> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Teledon.Protocol.TeledonProtocolReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CazCaritabil() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CazCaritabil(CazCaritabil other) : this() {
      id_ = other.id_;
      totalSum_ = other.totalSum_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CazCaritabil Clone() {
      return new CazCaritabil(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "totalSum" field.</summary>
    public const int TotalSumFieldNumber = 2;
    private string totalSum_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TotalSum {
      get { return totalSum_; }
      set {
        totalSum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CazCaritabil);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CazCaritabil other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (TotalSum != other.TotalSum) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (TotalSum.Length != 0) hash ^= TotalSum.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (TotalSum.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TotalSum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (TotalSum.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TotalSum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CazCaritabil other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.TotalSum.Length != 0) {
        TotalSum = other.TotalSum;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            TotalSum = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Donator : pb::IMessage<Donator> {
    private static readonly pb::MessageParser<Donator> _parser = new pb::MessageParser<Donator>(() => new Donator());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Donator> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Teledon.Protocol.TeledonProtocolReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Donator() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Donator(Donator other) : this() {
      name_ = other.name_;
      address_ = other.address_;
      phone_ = other.phone_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Donator Clone() {
      return new Donator(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 2;
    private string address_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "phone" field.</summary>
    public const int PhoneFieldNumber = 3;
    private string phone_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Phone {
      get { return phone_; }
      set {
        phone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Donator);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Donator other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Address != other.Address) return false;
      if (Phone != other.Phone) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (Phone.Length != 0) hash ^= Phone.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Address.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Address);
      }
      if (Phone.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Phone);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (Phone.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Phone);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Donator other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.Phone.Length != 0) {
        Phone = other.Phone;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Address = input.ReadString();
            break;
          }
          case 26: {
            Phone = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Donatie : pb::IMessage<Donatie> {
    private static readonly pb::MessageParser<Donatie> _parser = new pb::MessageParser<Donatie>(() => new Donatie());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Donatie> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Teledon.Protocol.TeledonProtocolReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Donatie() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Donatie(Donatie other) : this() {
      idCazCaritabil_ = other.idCazCaritabil_;
      numeDonator_ = other.numeDonator_;
      adresaDonator_ = other.adresaDonator_;
      telefonDonator_ = other.telefonDonator_;
      sumaDonata_ = other.sumaDonata_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Donatie Clone() {
      return new Donatie(this);
    }

    /// <summary>Field number for the "idCazCaritabil" field.</summary>
    public const int IdCazCaritabilFieldNumber = 1;
    private string idCazCaritabil_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IdCazCaritabil {
      get { return idCazCaritabil_; }
      set {
        idCazCaritabil_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "numeDonator" field.</summary>
    public const int NumeDonatorFieldNumber = 2;
    private string numeDonator_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NumeDonator {
      get { return numeDonator_; }
      set {
        numeDonator_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "adresaDonator" field.</summary>
    public const int AdresaDonatorFieldNumber = 3;
    private string adresaDonator_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AdresaDonator {
      get { return adresaDonator_; }
      set {
        adresaDonator_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "telefonDonator" field.</summary>
    public const int TelefonDonatorFieldNumber = 4;
    private string telefonDonator_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TelefonDonator {
      get { return telefonDonator_; }
      set {
        telefonDonator_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sumaDonata" field.</summary>
    public const int SumaDonataFieldNumber = 5;
    private double sumaDonata_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SumaDonata {
      get { return sumaDonata_; }
      set {
        sumaDonata_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Donatie);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Donatie other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IdCazCaritabil != other.IdCazCaritabil) return false;
      if (NumeDonator != other.NumeDonator) return false;
      if (AdresaDonator != other.AdresaDonator) return false;
      if (TelefonDonator != other.TelefonDonator) return false;
      if (SumaDonata != other.SumaDonata) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IdCazCaritabil.Length != 0) hash ^= IdCazCaritabil.GetHashCode();
      if (NumeDonator.Length != 0) hash ^= NumeDonator.GetHashCode();
      if (AdresaDonator.Length != 0) hash ^= AdresaDonator.GetHashCode();
      if (TelefonDonator.Length != 0) hash ^= TelefonDonator.GetHashCode();
      if (SumaDonata != 0D) hash ^= SumaDonata.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IdCazCaritabil.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(IdCazCaritabil);
      }
      if (NumeDonator.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NumeDonator);
      }
      if (AdresaDonator.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AdresaDonator);
      }
      if (TelefonDonator.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TelefonDonator);
      }
      if (SumaDonata != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(SumaDonata);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IdCazCaritabil.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IdCazCaritabil);
      }
      if (NumeDonator.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NumeDonator);
      }
      if (AdresaDonator.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AdresaDonator);
      }
      if (TelefonDonator.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TelefonDonator);
      }
      if (SumaDonata != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Donatie other) {
      if (other == null) {
        return;
      }
      if (other.IdCazCaritabil.Length != 0) {
        IdCazCaritabil = other.IdCazCaritabil;
      }
      if (other.NumeDonator.Length != 0) {
        NumeDonator = other.NumeDonator;
      }
      if (other.AdresaDonator.Length != 0) {
        AdresaDonator = other.AdresaDonator;
      }
      if (other.TelefonDonator.Length != 0) {
        TelefonDonator = other.TelefonDonator;
      }
      if (other.SumaDonata != 0D) {
        SumaDonata = other.SumaDonata;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            IdCazCaritabil = input.ReadString();
            break;
          }
          case 18: {
            NumeDonator = input.ReadString();
            break;
          }
          case 26: {
            AdresaDonator = input.ReadString();
            break;
          }
          case 34: {
            TelefonDonator = input.ReadString();
            break;
          }
          case 41: {
            SumaDonata = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TeledonRequest : pb::IMessage<TeledonRequest> {
    private static readonly pb::MessageParser<TeledonRequest> _parser = new pb::MessageParser<TeledonRequest>(() => new TeledonRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeledonRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Teledon.Protocol.TeledonProtocolReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeledonRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeledonRequest(TeledonRequest other) : this() {
      type_ = other.type_;
      switch (other.PayloadCase) {
        case PayloadOneofCase.User:
          User = other.User.Clone();
          break;
        case PayloadOneofCase.Donatie:
          Donatie = other.Donatie.Clone();
          break;
        case PayloadOneofCase.Donator:
          Donator = other.Donator.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeledonRequest Clone() {
      return new TeledonRequest(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Teledon.Protocol.TeledonRequest.Types.Type type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Teledon.Protocol.TeledonRequest.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Teledon.Protocol.Voluntar User {
      get { return payloadCase_ == PayloadOneofCase.User ? (global::Teledon.Protocol.Voluntar) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.User;
      }
    }

    /// <summary>Field number for the "donatie" field.</summary>
    public const int DonatieFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Teledon.Protocol.Donatie Donatie {
      get { return payloadCase_ == PayloadOneofCase.Donatie ? (global::Teledon.Protocol.Donatie) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Donatie;
      }
    }

    /// <summary>Field number for the "donator" field.</summary>
    public const int DonatorFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Teledon.Protocol.Donator Donator {
      get { return payloadCase_ == PayloadOneofCase.Donator ? (global::Teledon.Protocol.Donator) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Donator;
      }
    }

    private object payload_;
    /// <summary>Enum of possible cases for the "payload" oneof.</summary>
    public enum PayloadOneofCase {
      None = 0,
      User = 2,
      Donatie = 3,
      Donator = 4,
    }
    private PayloadOneofCase payloadCase_ = PayloadOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayloadOneofCase PayloadCase {
      get { return payloadCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPayload() {
      payloadCase_ = PayloadOneofCase.None;
      payload_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeledonRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeledonRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!object.Equals(User, other.User)) return false;
      if (!object.Equals(Donatie, other.Donatie)) return false;
      if (!object.Equals(Donator, other.Donator)) return false;
      if (PayloadCase != other.PayloadCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.User) hash ^= User.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Donatie) hash ^= Donatie.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Donator) hash ^= Donator.GetHashCode();
      hash ^= (int) payloadCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (payloadCase_ == PayloadOneofCase.User) {
        output.WriteRawTag(18);
        output.WriteMessage(User);
      }
      if (payloadCase_ == PayloadOneofCase.Donatie) {
        output.WriteRawTag(26);
        output.WriteMessage(Donatie);
      }
      if (payloadCase_ == PayloadOneofCase.Donator) {
        output.WriteRawTag(34);
        output.WriteMessage(Donator);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (payloadCase_ == PayloadOneofCase.User) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (payloadCase_ == PayloadOneofCase.Donatie) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Donatie);
      }
      if (payloadCase_ == PayloadOneofCase.Donator) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Donator);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeledonRequest other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      switch (other.PayloadCase) {
        case PayloadOneofCase.User:
          User = other.User;
          break;
        case PayloadOneofCase.Donatie:
          Donatie = other.Donatie;
          break;
        case PayloadOneofCase.Donator:
          Donator = other.Donator;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Teledon.Protocol.TeledonRequest.Types.Type) input.ReadEnum();
            break;
          }
          case 18: {
            global::Teledon.Protocol.Voluntar subBuilder = new global::Teledon.Protocol.Voluntar();
            if (payloadCase_ == PayloadOneofCase.User) {
              subBuilder.MergeFrom(User);
            }
            input.ReadMessage(subBuilder);
            User = subBuilder;
            break;
          }
          case 26: {
            global::Teledon.Protocol.Donatie subBuilder = new global::Teledon.Protocol.Donatie();
            if (payloadCase_ == PayloadOneofCase.Donatie) {
              subBuilder.MergeFrom(Donatie);
            }
            input.ReadMessage(subBuilder);
            Donatie = subBuilder;
            break;
          }
          case 34: {
            global::Teledon.Protocol.Donator subBuilder = new global::Teledon.Protocol.Donator();
            if (payloadCase_ == PayloadOneofCase.Donator) {
              subBuilder.MergeFrom(Donator);
            }
            input.ReadMessage(subBuilder);
            Donator = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TeledonRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("Unknown")] Unknown = 0,
        [pbr::OriginalName("Login")] Login = 1,
        [pbr::OriginalName("Logout")] Logout = 2,
        [pbr::OriginalName("GetCazuriCaritabile")] GetCazuriCaritabile = 3,
        [pbr::OriginalName("SearchDonatori")] SearchDonatori = 4,
        [pbr::OriginalName("AddDonatie")] AddDonatie = 5,
      }

    }
    #endregion

  }

  public sealed partial class TeledonResponse : pb::IMessage<TeledonResponse> {
    private static readonly pb::MessageParser<TeledonResponse> _parser = new pb::MessageParser<TeledonResponse>(() => new TeledonResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeledonResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Teledon.Protocol.TeledonProtocolReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeledonResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeledonResponse(TeledonResponse other) : this() {
      type_ = other.type_;
      error_ = other.error_;
      cazuriCaritabile_ = other.cazuriCaritabile_.Clone();
      donatori_ = other.donatori_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeledonResponse Clone() {
      return new TeledonResponse(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Teledon.Protocol.TeledonResponse.Types.Type type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Teledon.Protocol.TeledonResponse.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 2;
    private string error_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cazuriCaritabile" field.</summary>
    public const int CazuriCaritabileFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Teledon.Protocol.CazCaritabil> _repeated_cazuriCaritabile_codec
        = pb::FieldCodec.ForMessage(26, global::Teledon.Protocol.CazCaritabil.Parser);
    private readonly pbc::RepeatedField<global::Teledon.Protocol.CazCaritabil> cazuriCaritabile_ = new pbc::RepeatedField<global::Teledon.Protocol.CazCaritabil>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Teledon.Protocol.CazCaritabil> CazuriCaritabile {
      get { return cazuriCaritabile_; }
    }

    /// <summary>Field number for the "donatori" field.</summary>
    public const int DonatoriFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Teledon.Protocol.Donator> _repeated_donatori_codec
        = pb::FieldCodec.ForMessage(34, global::Teledon.Protocol.Donator.Parser);
    private readonly pbc::RepeatedField<global::Teledon.Protocol.Donator> donatori_ = new pbc::RepeatedField<global::Teledon.Protocol.Donator>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Teledon.Protocol.Donator> Donatori {
      get { return donatori_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeledonResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeledonResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Error != other.Error) return false;
      if(!cazuriCaritabile_.Equals(other.cazuriCaritabile_)) return false;
      if(!donatori_.Equals(other.donatori_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      hash ^= cazuriCaritabile_.GetHashCode();
      hash ^= donatori_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Error.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Error);
      }
      cazuriCaritabile_.WriteTo(output, _repeated_cazuriCaritabile_codec);
      donatori_.WriteTo(output, _repeated_donatori_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      size += cazuriCaritabile_.CalculateSize(_repeated_cazuriCaritabile_codec);
      size += donatori_.CalculateSize(_repeated_donatori_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeledonResponse other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      cazuriCaritabile_.Add(other.cazuriCaritabile_);
      donatori_.Add(other.donatori_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Teledon.Protocol.TeledonResponse.Types.Type) input.ReadEnum();
            break;
          }
          case 18: {
            Error = input.ReadString();
            break;
          }
          case 26: {
            cazuriCaritabile_.AddEntriesFrom(input, _repeated_cazuriCaritabile_codec);
            break;
          }
          case 34: {
            donatori_.AddEntriesFrom(input, _repeated_donatori_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TeledonResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("Unknown")] Unknown = 0,
        [pbr::OriginalName("Ok")] Ok = 1,
        [pbr::OriginalName("Error")] Error = 2,
        [pbr::OriginalName("GetCazuriCaritabile")] GetCazuriCaritabile = 3,
        [pbr::OriginalName("GetDonatori")] GetDonatori = 4,
        [pbr::OriginalName("AddedDonatie")] AddedDonatie = 5,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
